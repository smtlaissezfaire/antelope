### Generated by rprotoc. DO NOT EDIT!
### <proto file: protocol_buffer.proto>
# package antelope.compiler;
# 
# message ProtocolBuffer {
#   enum NodeTypes {
#     RULE                = 1;
#     LITERAL             = 2;
#     ALTERNATION         = 3;
#     GROUPED_EXPRESSION  = 4;
#     OPTIONAL_EXPRESSION = 5;
#     OPTIONAL_REPETITION = 6;
#     REPETITION          = 7;
#   }
# 
#   message Node {
#     required int32     identifier   = 1;
#     required NodeTypes type         = 2;
#     repeated int32     references   = 3;
#     optional string    text         = 4;
#   }
# 
#   message Rule {
#     required int32  identifier  = 1;
#     required string name        = 2;
#   }
# 
#   message Grammar {
#     required string name       = 1;
#     required int32  start_rule = 2;
#     repeated Rule   rules      = 3;
#     repeated Node   nodes      = 4;
#   }
# 
#   required Grammar grammar = 1;
# }
require 'protobuf/message/message'
require 'protobuf/message/enum'
require 'protobuf/message/service'
require 'protobuf/message/extend'

module Antelope
  module Compiler
    class ProtocolBuffer < ::Protobuf::Message
      defined_in __FILE__
      class NodeTypes < ::Protobuf::Enum
        defined_in __FILE__
        RULE = 1
        LITERAL = 2
        ALTERNATION = 3
        GROUPED_EXPRESSION = 4
        OPTIONAL_EXPRESSION = 5
        OPTIONAL_REPETITION = 6
        REPETITION = 7
      end
      class Node < ::Protobuf::Message
        defined_in __FILE__
        required :int32, :identifier, 1
        required :NodeTypes, :type, 2
        repeated :int32, :references, 3
        optional :string, :text, 4
      end
      class Rule < ::Protobuf::Message
        defined_in __FILE__
        required :int32, :identifier, 1
        required :string, :name, 2
      end
      class Grammar < ::Protobuf::Message
        defined_in __FILE__
        required :string, :name, 1
        required :int32, :start_rule, 2
        repeated :Rule, :rules, 3
        repeated :Node, :nodes, 4
      end
      required :Grammar, :grammar, 1
    end
  end
end